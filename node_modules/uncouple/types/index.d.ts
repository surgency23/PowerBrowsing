/**
 * Property name from `T`.
 */
declare type PropertyNameOf<T> = Extract<keyof T, string>;
/**
 * Uncoupled methods from `T`.
 */
declare type UncoupledMethodsOf<T> = {
    [K in PropertyNameOf<T>]: T[K] extends (...args: any[]) => any ? (instance: T, ...args: Parameters<T[K]>) => ReturnType<T[K]> : never;
};
/**
 * Constructor (class) with generic prototype `T`.
 */
declare type Constructor<T> = (new (...args: any[]) => any) & {
    prototype: T;
};
/**
 * Uncouple methods from constructor (class) into functions.
 * @example ```js
 * const { filter } = uncouple(Array);
 * filter([ 1, 2, 3, 4 ], (value) => value % 2 === 0);
 * //=> [ 2, 4 ]
 * ```
 * @param constructor - A constructor (class) to be uncoupled into functions.
 */
declare const uncouple: <T>({ prototype }: Constructor<T>) => UncoupledMethodsOf<T>;
export default uncouple;
