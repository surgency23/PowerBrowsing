{"version":3,"file":"index.umd.min.js","sources":["../node_modules/uncouple/dist/index.mjs","../src/functional.js","../src/index.js"],"sourcesContent":["/*!\n * uncouple v0.5.0\n * (c) Vitor Luiz Cavalcanti <vitorluizc@outlook.com> (https://vitorluizc.github.io)\n * Released under the MIT License.\n */\n/**\r\n * Uncouple methods from constructor (class) into functions.\r\n * @example ```js\r\n * const { filter } = uncouple(Array);\r\n * filter([ 1, 2, 3, 4 ], (value) => value % 2 === 0);\r\n * //=> [ 2, 4 ]\r\n * ```\r\n * @param constructor - A constructor (class) to be uncoupled into functions.\r\n */\nvar uncouple = function (_a) {\n  var prototype = _a.prototype;\n  var names = Object.getOwnPropertyNames(prototype);\n  return names.reduce(function (methods, name) {\n    if (typeof prototype[name] === \"function\" && name !== \"constructor\") // @ts-ignore\n      { methods[name] = Function.call.bind(prototype[name]); }\n    return methods;\n  }, Object.create(null));\n};\n\nexport default uncouple;\n","import uncouple from \"uncouple\";\n\nconst {\n  slice: shallowCloneArray,\n  reverse,\n  reduce: reduceLeft,\n  reduceRight\n} = uncouple(Array);\n\n/**\n * `Array.prototype.reduceRight` or a polyfill.\n */\nconst reduce =\n  reduceRight ||\n  ((value, λ, initial) => {\n    const items = reverse(shallowCloneArray(value));\n    return reduceLeft(items, λ, initial);\n  });\n\n/**\n * Compose functions into a new one (RTL).\n * @template T, U\n * @param  {...function(T):U} λs\n * @returns {U}\n */\nexport const compose = (...λs) => value =>\n  reduce(λs, (value, λ) => λ(value), value);\n\n/**\n * Returns received value.\n * @param {T} value\n * @returns {T}\n * @template T\n */\nexport const identity = value => value;\n","import uncouple from \"uncouple\";\nimport { compose, identity } from \"./functional\";\n\nconst { join } = uncouple(Array);\n\nconst {\n  trim: removeTrailingWhitespaces,\n  replace,\n  substring,\n  normalize,\n  toLowerCase,\n  toUpperCase,\n  toLocaleLowerCase: transformToLowerCase = toLowerCase,\n  toLocaleUpperCase: transformToUpperCase = toUpperCase\n} = uncouple(String);\n\n/**\n * Remove spaces from start and end, transform multiple spaces into single one\n * and every space character into whitespace character.\n * @example ```js\n * ('  Fernanda \\t Montenegro\\r\\n') => 'Fernanda Montenegro'\n * ```\n * @param {string} value\n * @returns {string}\n */\nexport const normalizeWhitespaces = compose(\n  removeTrailingWhitespaces,\n  value => replace(value, /\\s{2,}|\\s/g, \" \")\n);\n\n/**\n * Normalize diacritics removing diacritics (accents) from letters.\n * @example ```js\n * ('Olá, você aí') => 'Ola, voce ai'\n * ```\n * @param {string} value\n * @returns {string}\n */\nexport const normalizeDiacritics = !normalize\n  ? identity\n  : compose(\n      value => replace(value, /[\\u0080-\\uF8FF]/g, \"\"),\n      value => normalize(value, \"NFKD\")\n    );\n\n/**\n * Normalize a paragraph. Normalize it's whitespaces, transform first letter to\n * upper case and put a dot at end.\n * @example ```js\n * ('hello world, my friend\\r\\n') => 'Hello world, my friend.'\n * ```\n * @param {string} value\n * @returns {string}\n */\nexport const normalizeParagraph = compose(\n  value => transformToUpperCase(value[0]) + substring(value, 1),\n  value => (value[value.length - 1] === \".\" ? value : value + \".\"),\n  normalizeWhitespaces\n);\n\n/**\n * Normalize a name. Normalize it's whitespaces and capitalize letters.\n * @example ```js\n * (' fernanda \\tMONTENEGRO') => 'Fernanda Montenegro'\n * ```\n * @param {string} value\n * @returns {string}\n */\nexport const normalizeName = compose(\n  value => replace(value, /^\\w|\\ \\w/g, transformToUpperCase),\n  transformToLowerCase,\n  normalizeWhitespaces\n);\n\n/**\n * Join arguments (when receives an `Array`), normalize it's whitespaces,\n * normalize it's diacritics and transform to lower case.\n * @example ```js\n * ([ '    Olá, \\r\\n', 'Fernanda \\t MONtenegro' ]) => 'ola, fernanda montenegro'\n * ```\n * @param {(string|Array.<string>)} value\n * @returns {string}\n */\nexport default compose(\n  transformToLowerCase,\n  normalizeWhitespaces,\n  normalizeDiacritics,\n  values => (Array.isArray(values) ? join(values, \" \") : values)\n);\n"],"names":["uncouple","_a","prototype","Object","getOwnPropertyNames","reduce","methods","name","Function","call","bind","create","Array","value","λ","initial","items","reverse","shallowCloneArray","reduceLeft","compose","λs","String","toLowerCase","toUpperCase","normalizeWhitespaces","removeTrailingWhitespaces","replace","normalizeDiacritics","normalize","normalizeParagraph","transformToUpperCase","substring","length","normalizeName","transformToLowerCase","values","isArray","join"],"mappings":";;;;;0MAcA,IAAIA,EAAW,SAAUC,GACvB,IAAIC,EAAYD,EAAGC,UAEnB,OADYC,OAAOC,oBAAoBF,GAC1BG,OAAO,SAAUC,EAASC,GAGrC,MAF+B,mBAApBL,EAAUK,IAAiC,gBAATA,IACzCD,EAAQC,GAAQC,SAASC,KAAKC,KAAKR,EAAUK,KAC1CD,GACNH,OAAOQ,OAAO,UCdfX,EAASY,wCAKPP,0BAEFQ,EAAOC,EAAGC,OACJC,EAAQC,EAAQC,EAAkBL,WACjCM,EAAWH,EAAOF,EAAGC,IASnBK,oFAAqBP,UAChCR,EAAOgB,WAAKR,EAAOC,UAAMA,EAAED,IAAQA,OCvBpBb,EAASY,cAWtBZ,EAASsB,8HAF+BC,4CACAC,OAY/BC,EAAuBL,EAClCM,WACAb,UAASc,EAAQd,EAAO,aAAc,OAW3Be,EAAuBC,EAEhCT,WACEP,UAASc,EAAQd,EAAO,mBAAoB,cAC5CA,UAASgB,EAAUhB,EAAO,mBDRRA,UAASA,GCoBpBiB,EAAqBV,WAChCP,UAASkB,EAAqBlB,EAAM,IAAMmB,EAAUnB,EAAO,aAC3DA,SAAsC,MAA5BA,EAAMA,EAAMoB,OAAS,GAAapB,EAAQA,EAAQ,KAC5DY,GAWWS,EAAgBd,WAC3BP,UAASc,EAAQd,EAAO,YAAakB,IACrCI,EACAV,KAYaL,EACbe,EACAV,EACAG,WACAQ,UAAWxB,MAAMyB,QAAQD,GAAUE,EAAKF,EAAQ,KAAOA"}