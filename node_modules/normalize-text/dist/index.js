/*!
 * normalize-text v0.4.4
 * (c) Vitor Cavalcanti
 * Released under the MIT License.
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var uncouple = _interopDefault(require('uncouple'));

var ref = uncouple(Array);
var shallowCloneArray = ref.slice;
var reverse = ref.reverse;
var reduceLeft = ref.reduce;
var reduceRight = ref.reduceRight;
/**
 * `Array.prototype.reduceRight` or a polyfill.
 */

var reduce = reduceRight || (function (value, λ, initial) {
  var items = reverse(shallowCloneArray(value));
  return reduceLeft(items, λ, initial);
});
/**
 * Compose functions into a new one (RTL).
 * @template T, U
 * @param  {...function(T):U} λs
 * @returns {U}
 */


var compose = function () {
  var λs = [], len = arguments.length;
  while ( len-- ) λs[ len ] = arguments[ len ];

  return function (value) { return reduce(λs, function (value, λ) { return λ(value); }, value); };
};
/**
 * Returns received value.
 * @param {T} value
 * @returns {T}
 * @template T
 */

var identity = function (value) { return value; };

var ref$1 = uncouple(Array);
var join = ref$1.join;
var ref$1$1 = uncouple(String);
var removeTrailingWhitespaces = ref$1$1.trim;
var replace = ref$1$1.replace;
var substring = ref$1$1.substring;
var normalize = ref$1$1.normalize;
var toLowerCase = ref$1$1.toLowerCase;
var toUpperCase = ref$1$1.toUpperCase;
var transformToLowerCase = ref$1$1.toLocaleLowerCase; if ( transformToLowerCase === void 0 ) transformToLowerCase = toLowerCase;
var transformToUpperCase = ref$1$1.toLocaleUpperCase; if ( transformToUpperCase === void 0 ) transformToUpperCase = toUpperCase;
/**
 * Remove spaces from start and end, transform multiple spaces into single one
 * and every space character into whitespace character.
 * @example ```js
 * ('  Fernanda \t Montenegro\r\n') => 'Fernanda Montenegro'
 * ```
 * @param {string} value
 * @returns {string}
 */

var normalizeWhitespaces = compose(removeTrailingWhitespaces, function (value) { return replace(value, /\s{2,}|\s/g, " "); });
/**
 * Normalize diacritics removing diacritics (accents) from letters.
 * @example ```js
 * ('Olá, você aí') => 'Ola, voce ai'
 * ```
 * @param {string} value
 * @returns {string}
 */

var normalizeDiacritics = !normalize ? identity : compose(function (value) { return replace(value, /[\u0080-\uF8FF]/g, ""); }, function (value) { return normalize(value, "NFKD"); });
/**
 * Normalize a paragraph. Normalize it's whitespaces, transform first letter to
 * upper case and put a dot at end.
 * @example ```js
 * ('hello world, my friend\r\n') => 'Hello world, my friend.'
 * ```
 * @param {string} value
 * @returns {string}
 */

var normalizeParagraph = compose(function (value) { return transformToUpperCase(value[0]) + substring(value, 1); }, function (value) { return value[value.length - 1] === "." ? value : value + "."; }, normalizeWhitespaces);
/**
 * Normalize a name. Normalize it's whitespaces and capitalize letters.
 * @example ```js
 * (' fernanda \tMONTENEGRO') => 'Fernanda Montenegro'
 * ```
 * @param {string} value
 * @returns {string}
 */

var normalizeName = compose(function (value) { return replace(value, /^\w|\ \w/g, transformToUpperCase); }, transformToLowerCase, normalizeWhitespaces);
/**
 * Join arguments (when receives an `Array`), normalize it's whitespaces,
 * normalize it's diacritics and transform to lower case.
 * @example ```js
 * ([ '    Olá, \r\n', 'Fernanda \t MONtenegro' ]) => 'ola, fernanda montenegro'
 * ```
 * @param {(string|Array.<string>)} value
 * @returns {string}
 */

var index = compose(transformToLowerCase, normalizeWhitespaces, normalizeDiacritics, function (values) { return Array.isArray(values) ? join(values, " ") : values; });

exports.default = index;
exports.normalizeDiacritics = normalizeDiacritics;
exports.normalizeName = normalizeName;
exports.normalizeParagraph = normalizeParagraph;
exports.normalizeWhitespaces = normalizeWhitespaces;
